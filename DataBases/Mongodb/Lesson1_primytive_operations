
db.users.find() - вивід таблиці

db.users.find({ gender: 'female' , age: 29 }) - виведе користувачів female і в кого вік 29р.
db.users.find({},{age: 1, gender: 1, _id: 0}) - виведе зі всієї таблиці поля age та gender
                                                1 або 0 - вказує що виводити , а що ні.
db.users.find({'address.house': 45})          - якщо в обєкті є обєкт ( тобто таблиця склад з масиву обєктів, ів обєкта
                                                є обєкт [{address : {house:45},{},{}]) , то звернення відбувається таким
                                                чиом як у прикладі. Виведе всіх користувачів в кого номер буд 45
db.users.find({studying: 'java'})             - якщо в обєкті є масив ( тобто таблиця склад з масиву обєктів, і в обєкта
                                                є масив [{studying : [java,pytjon],{},{}]),то звернення відбувається таким
                                                чином як у прикладі. Виведе всіх користувачів в кого є 'java'
db.users.find({studying: {$size:3}})          - виведе всіх користувачів в кого масив studying буде мати 3 елементи
                                                [{studying : [java,pytjon,js],{},{}])
db.users.find({parents:{$exists:1}})          - шукає чи є наявне поле parents , якщо 1 - то виведе користувачів які
або так : db.users.find({parents: null})        мають це поле , якщо 0 то тих в кого воно відсутнє або пусте.
                                                Використовуючи null може вивести користувачів в кого поле parents має
                                                ключ null

db.users.find({name: /^A/})      - виведе всіх користувачів імя яких посинається на "А"
db.users.find({name: /^a/i})     - виведе всіх користувачів імя яких посинається на "А" або "a"
                        /і       - забирає чутливість до ркгістру великої і малої букви
db.users.find({name: /a$/i })    - виведе всіх користувачів імя яких завершується на  "А" або "a"
db.users.find({name: /.*v.*/i }) - виведе всіх користувачіd де в умені зустрічається буква "v"
                                   .*  - пропускає символи до вказаного  в даному випадку "v"

db.users.find({name: /^.{2}t/i })    - виведе всіх користувачів в яких імя має третю букву "t"
                                       {5} - можемо вказувати скільки символів пропустити
db.users.find({name: /^k.*a$/i })    - виведе всіх користувачів в яких імя поч. на  "к" і заверш. на "а"
db.users.find({name: /.*o.{2}$/i })  - виведе всіх користувачів в яких імя міститить букву "о" яка є третьою з кінця
                                       - Vova - буква "о" третя з кінця

Зміна даних :
Заміна одного параметру "raiting".
В даному випадку ми шукаємо обєкт по "_id"(він є обєктом) і замінюємо "raiting" на 8
db.users.updateOne(
    {_id: ObjectId("63bc46021edbef7fc31c29c6")},
    {$set: {rating: 8}}
    )
Заміна декількох параметрів.
В даному випадку шукаємо всіх користувачів з полем "male" та замінюємо їх на "animal"
db.users.updateMany(
    {gender: "male"},
    {$set: {gender: "animal"}}
    )
Змінюємо імена всіх батків на 'kokos'.
1. {parents: {$exists:1}} - вказуємо обєкт який будемо змінювати
                            {$exists:1} - означає всіх користувачів які мають обєкт parents
2. {$set: {'parents.$[]': 'Kokos'}}  - міняємо всі елементи масиву parents на кокос
db.users.updateMany(
    {parents: {$exists:1}},
    {$set: {'parents.$[]': 'Kokos'}}
    )

Зміна елементів масиу в обєкті => [{studying : [java,pytjon,js],{},{}]
Додаємо елемет 'java' в масив studying.
УВАГА! Якщо масиву studying не було то створить новий!
db.users.updateOne(
    {_id: ObjectId("63bc46021edbef7fc31c29c6")},
    {$push: {studying: 'java'}}
    )
Видаляємо(видалення) елемет 'java' в масиву studying.
db.users.updateOne(
    {_id: ObjectId("63bc46021edbef7fc31c29c6")},
    {$pull: {studying: 'java'}}
    )
db.users.deleteOne({_id: ObjectId("63bc46")})  - видалить обєкт з вказаним id


Використання булівських операторів "or" , "and"
db.users.find({
    $or :
        [
            {rating: 2},
            {rating: 5},
            {age: 22}
        ]
})


Діапазон :

db.users.find({rating: {$gt:2}})   - виведе всіх користувачів в кого рейтинг  2 < ...
db.users.find({rating: {$gte:2}})  - виведе всіх користувачів в кого рейтинг  2 <= ...
db.users.find({rating: {$lt:5}})   - виведе всіх користувачів в кого рейтинг  ... < 5
db.users.find({rating: {$lte:5}})  - виведе всіх користувачів в кого рейтинг  ... <= 5
db.users.find({rating: {$ne:2}})   - виведе всіх користувачів в кого рейтинг  != 2
db.users.find({rating: {$eq:2}})   - виведе всіх користувачів в кого рейтинг  = 2
db.users.find({rating: 2})   - виведе всіх користувачів в кого рейтинг  = 2

db.users.find({age: {$in: [25,12,26]} }) - виведе всіх користувачів з віком 25,12,26
db.users.find({age: {$nin: [25,12,26]} }) - виведе всіх користувачів які не входять у вік 25,12,26
Для складних записів з багатьма параметрами :
Виведе всіх користувачів які не входять у вік 25,12,26
db.users.find({
    age: {
        $nin : [25,12,26]
    }
})

Сортування :

db.users.find().sort({rating:1}) - відсортує користувачів по ренйтингу від min до max
                                   rating:1    - min - max
                                   rating: -1  - max - min

db.users.find().sort({rating:1 ,age: 1}) - можна сортувати по декільком полям.
                                           Для прикладу , є декілька користувачів з рейтингом 5 і з різним віком.
                                           В даному випадку ми спочатку відсортуємо по рейтингу , а потім в кого
                                           одинаковий рейтинг відсортується по віку

db.users.find().sort({rating:1 ,age: 1}).limit(2).skip(2) - відсортує по рейтингу і віку , пропустить перші два і виведе
                                                            наступні 3 користувачі