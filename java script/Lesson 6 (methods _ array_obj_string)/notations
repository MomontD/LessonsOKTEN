// Повний опис JS - https://developer.mozilla.org/en-US/docs/Web/JavaScript
// Опис стінгових методів та функцій : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String

// STRING
// *.toUpperCase() - переводить символи(ВСІ) у стрічці до верхнього регістру (hello world => HELLO WORLD)
// *.toLowerCase() - переводить символи(ВСІ) у стрічці до нижнього регістру (HELLO WORLD => hello world)
// *.startsWith("heloo") - перевіряє чи починається стрічка з символів , повертає true
// *.endsWith("world") -перевіряє чи закінчується стрічка з символів , повертає false
// *.substring(0, 2) - виводить символи з стрічки , 2 аргументи : 1 - початок , 2 - кінець(не включаючи)
//                     "hello world" =>"he"
// *.splice() - аналогічно як substring - треба розібратись
// *.indexOf("о") - повертає індекс смиволу в строці => 4 ("перше входження") або -1 якщо символ відсутній
// *.lastindexOf("о") - повертає індекс смиволу в строці ("останнє входження") або -1 якщо символ відсутній
// *.charAt(6) - виводить символ за вказаним індексом => "w"
// *.includes() - шукає слово або значення у стрічці або масиві. має 2 параметри
//                ("символ , слово , зачення","З якого індексу шукати")
// *.replaceAll("(", "") - замінює вказані символи на інші (067) 123-12-12 => 067) 123-12-12
//                        можна записати виразом *.replaceAll ( /[()-]/g , "") => 0671231212
//                        / відкриває вираз [перелік символів які необхідно замінити] / g - глобально
//                        у всій стрічці
// *.split() - розділяє стрічку в масив по вказаному роздільнику(аргумент)
//             1,2 => split(",") => [1,2]
//             якщо аргумент пустий split() - позамовчуванню розділяє по пробілу
// *.join("") - обєднує символи в стрічку. Аргумент - розділювач між елементами - , . " " і т.д.
// *.repeat() - додає необхідну к-сть симолів/чисел до числа/символа
                number = "5" + "0".repeat(4) => "50000"
// *.trim() - забирає пробіли (тільки на початку і в кінці) повертає нову стрічку.
//            new_str= old_str.trim()

// ARRAY
// *.isArray() - перевіряє чи у вхідному аргументі масив , повертає true/false
// *.push("element") - додає елемент в масив (останнім)
// *.pop() - видаляє останній елемент масиву - ф-я повертає видалений елемент
// *.shift() - видаляє перший елемент масиву - ф-я повертає видалений елемент
// *.unshift("element") - додає елемент на початок масиву
// *.join("") - обєднує елементи масиву в стрічку. Аргумент - розділювач між елементами - , . " " і т.д.
// *.concat() - обєднує масиви , повертає новий масив new_mass = new_mass_1.concat(new_mass_2)
// *.splice() - видаляє елементи з масиву , 3 аргументи (індекси) : 1 - з якого видяляти , 2- по який
//              3 - на що замінити (не обовязково при потребі) arr.splice(0, 2, "Hello") - видаляємо 2 елементи і на
//              їх місце додаємо новий "Hello".
//              повертає видалені елементи
// *.reverse() - масив "задом на перед". new_mass=arr.reverse()
// *.includes() - перевіряє чи вказаний в аргументі (обєкт , елемент , символ і т.д.) є в масиві.
//                повертає true/false.  arr.includes(1)


// Callback Function
//*.forEach() - функція яка перебирає маисв , обєкт за зразком циклу iter.
                В приймаючому аргументі підставляємо іншу функці в якій вказуємо що необхідно зробити з конкретним
                елементом.Повертає дані (через return !!! , тобто ф-я в собі повертає новий масив  , обєкт після дій)
                Приклад :

                users = [
                          {name : "vasya" , age : 22},
                          {name : "fedya" , age : 30}
                        ]
                ---------------------------------
                let print_element = (user) => console.log(user)

                users.forEach(print_element)
                ---------------------------------
                АБО
                ---------------------------------
                users.forEach ( function print_element (user) { console.log(user) } )
                ---------------------------------
                АБО
                ---------------------------------
                users.forEach (  (user) => console.log(user)  )
                ---------------------------------

// *.filter() - ф-я яка виконує відбір елементів за вказаних умов в вхідній ф-ї (аргумент) та повертає дані (через
                return !!! , тобто ф-я в собі повертає новий масив  , обєкт після дій)
                "Під капотом" - iter na if - ми просто задаємо умову по якій робити відбір.

                 users = [
                            {name : "vasya" , age : 22},
                            {name : "fedya" , age : 30}
                         ]
                 console.log ( users.filter( (user) => user.age > 25 ) )

                 //console.log ( users.filter( (user) => user.age > 25 && user.status === true) )
                 //можна задавати декілька умов через булівські оператори && , || , ===

                 // Може приймати 3 аргументи : (user , index , arr)
                    index - індекс елемента який необхідно проітерувати
                    arr -  масив до якого належить елемент
// *.map() - ф-я яка повертає новий масив з обєктами після вказаних дій.
             Дії :
                1. Додавання нових ключів та їх значень обєкт у новий масив з старого (додати новий ключ id до наявних
                name, age)
                2. Формування нового масиву з обєктів старого(вхідного) по критеріям (тільки name та age)

               users = [
                            {name : "vasya" , age : 22},
                            {name : "fedya" , age : 30}
                        ]
               ------------------------------
               let new_users = users.map ( (user) => ({ name : user.name }))
               console.log(new_users);
               // при роботі з обєктом  його ключі і значення потрібно брати в додаткові () так як у прикладі.
               // при короткій конструкції у вигляді стрілочної ф-ї
               // він робочий
               -------------------------------
               АБО додаємо новий ключ в обєкт
               -------------------------------
               let new_users_2 = users.map ( (user,index ) => ({ id : index+500 , name : user.name }))
               console.log(new_users_2);
               // другий аргумент index - номер(відлік) який ми можемо задати при необхідності
                  в даному прикладі всі id будуть починатись з 500 номеру і рости на 1

// Формування нового масиву через  map і фільтрація filter

    *.map( ф-я).filter(ф-я) - можна використовувати декілька ф-й через крапку.
    let new_users_2 = users
        .map ( (user,index ) => ({ id : index+500 , name : user.name }))
        .filter (user => user.id % 2 === 0)
        .forEach ( user => console.log(user))

    // створює новий масив з id та виводить користувачів з парними id та вивели їх у консоль forEach
    // Алгоритм :
       1. map - створює новий масив
       2. filter - фільтрує по парним id
       3. forEach - виводить дані

// *.sort () - сортування масиву з обєктами по різним критеріям (див. нижче приклади - робочі)

let users2 = [
    {name: 'vasya', age: 31, status: false},
    {name: 'petya', age: 30, status: true},
    {name: 'kolya', age: 29, status: true},
    {name: 'olya', age: 28, status: false},
    {name: 'max', age: 30, status: true},
    {name: 'anya', age: 31, status: false},
    {name: 'oleg', age: 28, status: false},
    {name: 'andrey', age: 29, status: true},
    {name: 'masha', age: 30, status: true},
    {name: 'olya', age: 31, status: false},
    {name: 'max', age: 31, status: true}
];

// Відсортували по віку
console.log(users2.sort((user1, user2) => user1.age - user2.age));
// ф-я бере обєкти по парно та порівнює їх. Принцип user1.age = 31 , user2.age = 30
// 30-31 = 1 , означає що перший обєкт більший за другий і його необхідно перемістити в низ
// такий алгоритм , функція сама все від фільтрує і посортує , додаткових циклів не потрібно
// вона так працює

// Сортування по довжині імені
console.log(users2.sort((user1, user2) => user1.name.length - user2.name.length));
// Аналогічний принцип , бере довжину імен двої обєктів , порівнює і найбільший опускає до низу.

// сортуємо по імені (алфавітний порядок)
console.log(users2.sort(function (user1, user2)
    {
        if (user1.name > user2.name)
        { return 1;} // 1 опускає в низ
        if (user1.name < user2.name)
        { return -1; } // -1 піднімає в гору
        if (user1.name === user2.name)
        { return 0; } // залишає на місці
    }
    ));

// *.reduce() - ф-я яка повертає об'єкт з масивів по вказаним критеріям.
                приймає 2 аргументи :
                reduce((accumulator, user)
                accumulator - це бцде новий обєкт в який записуються дані
                user - ітерований обєкт.
                Тобто в новий обєкт accumulator буде в процесі ітерації записуватись дані з масиву обєктів
                Формування колбек ф-ї :
                reduce((accumulator, user) => {/дія/} { формат нового масиву names: [], ages: [], statues: []}

                Приклад :

  let users2 = [
      {name: 'vasya', age: 31, status: false},
      {name: 'petya', age: 30, status: true},
      {name: 'kolya', age: 29, status: true},
      {name: 'olya', age: 28, status: false},
      {name: 'max', age: 30, status: true},
      {name: 'anya', age: 31, status: false},
      {name: 'oleg', age: 28, status: false},
      {name: 'andrey', age: 29, status: true},
      {name: 'masha', age: 30, status: true},
      {name: 'olya', age: 31, status: false},
      {name: 'max', age: 31, status: true}
  ];

 let reduce = users.reduce((accumulator, user) => {
        accumulator.names.push(user.name);
        accumulator.ages.push(user.age);
        accumulator.statues.push(user.status);
        return accumulator;
    }, {names: [], ages: [], statues: []});

   console.log(reduce);

   Вихід :
 ages  : [29, 31, 29, 30, 30, 31, 28, 28, 31, 30, 31]
 names : ['andrey', 'anya', 'kolya', 'masha', 'max', 'max', 'oleg', 'olya', 'olya', 'petya', 'vasya']
 statues : [true, false, true, true, true, true, false, false, false, true, false]


// OBJECTS
---- 1 - Створення обєкту зі змінних.
         Якщо назви нових змінних дорівнюють назвам з обєкту можна зробити скорочену форму :

     let name = 'vasya';
     let age = 31;

     let user = { name : name,
                  age : age
                 }
     скорочена форма :
     let user = { name, age }

---- 2 - копіювання даних з обєкту

     let user = { name : kokos,
                  age : 31
                }
     let {name,age} = user

     *** коли обєкт в обєкті

     let user = {
              name: 'kokos',
              age: 31,
              wife: {
                  name: 'olya',
                  age: 32
                    }
          }
          let {name, age, wife,  wife: {name: wName, age: wAge}, status} = user;
            // Виведе окремо обєкт wife та її значення змінним wName , age: wAge

---- 3 - копіювання обєкту
      SHALOW COPY - поверхневе копіювання , при зміні значень в клонах , змінюються дані в оригіналі
      let user2 = {...user} - копіюємо за допомогою оператора "..." дані з обєкту
                              user в новий обєкт user2

      let user3 = {...user, status: true, name: 'abrikos'} - - копіюємо дані з обєкту
        user в новий обєкт user2 паралельно додаючи нове поле status: true та ЗМІНЮЄМО поле name: на 'abrikos'

      АБО за допомогою *.map()
      let users = [
                    {name: 'vasya', age: 31, status: false},
                    {name: 'petya', age: 30, status: true},
                  ];
          *** класичний підхід
           users.map((value, index) => ({
                   name: value.name,
                   age: value.age,
                   status: value.status,
                   id: index + 1,
               }
           ))
          *** Скорочений
          console.log(users.map((value, index) => ({...value, id: index + 1})));

      DEEP COPY - глибоке копіювання , новий обєкт незалежний від оригіналу.
      Створюється за допомогою JSON. Крок 1 : перетворюємо обєкт в стрінгу , Крок 2 : стрінгу
      в новий обєкт.
      Крок 1
      let stringify = JSON.stringify(user);

      Крок 2
      let parse = JSON.parse(stringify);

      АБО скорочений запис :
      function copyCentr(obj) {
              return JSON.parse(JSON.stringify(obj));
          }
      const copy = (obj) => JSON.parse(JSON.stringify(obj));
