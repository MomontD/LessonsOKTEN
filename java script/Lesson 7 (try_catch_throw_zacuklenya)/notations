
// ---- try / catch - спроба , перевірка коду , даних і т.д.
//                 try  - описуємо , що необхідно перевірити.
//                 cath - при виненкнені помилки виводить її "ловить"
//                        примає 1 аргумент (назва довільна) потім той аргумент
//                        виводимо або робимо з ним інші дії.
//                 *** при цьому код виконується далі - console.log('end');
//function foo(obj)
//{
//    try {console.log(obj.name)}
//    catch (asdasdadas)
//        {
//            console.error(asdasdadas);
//        }
//    console.log('end');
//    finaly {"Блок який виконується в будь-якому випадку чи спрацював try/catch чи ні"}
//}
//foo();


// ---- throw - "викидує" помилку та завершує виконання коду.
//function divider(a, b)
//{
//     if (b === 0)
//        {
//            throw new Error('ouououou B is - Zero');
//        }
//     return a / b;
//}
//"ловимо" try / catch результат функції divider()
//
//try {divider(10, 0)}
//    catch (asdasdadas)
//        {
//            console.error(asdasdadas);
//        }


// ---- ? - "одноокий елвіс" - перевіряє "справжінсть" викликаної змінної (можливо коду , обєкту - потрібно
//                             розібратись)
//let user
//console.log(user?.name);
//console.log(user?.wife?.name)
//*** В даному випадку в консоль видасть "undefined"(не визначений) - тому , що user неоголошений як обєкт
//    і не має поля.
//    Якщо user буде оголошений як обєкт і мати поле name воно просто покаже значення user.name

// Замикання - ми декларуємо дані ( let balance , transactionLimit , const historyLog = [], key = id)
                на початку функції , а робота з ними відбувається тільки через вкладені функції. Напряму змінити їх не
                можна. Повертаємо через return вкладені ф-ї ( getCardOptions,putCredits, takeCredits) - це і є
                зациклення.


const userCard = (id) => {
    let balance = 100;
    let transactionLimit = 100;
    const historyLog = [];
    const key = id;

    const createMessage = (operationType, credits) => ({operationType, credits, operationTime: new Date()});

    const getCardOptions = () => ({balance, historyLog, transactionLimit, key});

    const putCredits = (money) => {
        balance += money;
        historyLog.push(createMessage('putCredits', money));
    }

    const takeCredits = (money) => {
        if (balance - money >= 0) {
            balance -= money;
            historyLog.push(createMessage('takeCredits', money))
        } else {
            historyLog.push(createMessage('takeCreditsError'));
            console.error('not enough money');
        }
    }

    return {
        getCardOptions,
        putCredits,
        takeCredits
    }

}